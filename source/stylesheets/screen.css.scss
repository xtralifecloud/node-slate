@charset "utf-8";
@import 'normalize';
@import 'variables';
@import 'icon-font';
// @import 'rtl'; // uncomment to switch to RTL format

/*
Copyright 2008-2013 Concur Technologies, Inc.

Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.
*/

////////////////////////////////////////////////////////////////////////////////
// GENERAL STUFF
////////////////////////////////////////////////////////////////////////////////

html, body {
  color: $main-text;
  padding: 0;
  margin: 0;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  @extend %default-font;
  background-color: $main-bg;
  height: 100%;
  -webkit-text-size-adjust: none; /* Never autoresize text */
}

////////////////////////////////////////////////////////////////////////////////
// TABLE OF CONTENTS
////////////////////////////////////////////////////////////////////////////////

#toc > ul > li > a > span {
  float: right;
  background-color: #2484FF;
  border-radius: 40px;
  width: 20px;
}

.toc-wrapper {
  transition: left 0.3s ease-in-out;

  overflow-y: auto;
  overflow-x: hidden;
  position: fixed;
  z-index: 30;
  top: 0;
  left: 0;
  bottom: 0;
  width: $nav-width;
  background-color: $nav-bg;
  font-size: 13px;
  font-weight: bold;

  // language selector for mobile devices
  .lang-selector {
    display: none;
    a {
      padding-top: 0.5em;
      padding-bottom: 0.5em;
    }
  }

  // This is the logo at the top of the ToC
  .logo {
    display: block;
    max-width: 100%;
    margin-bottom: $logo-margin;
    margin-top: 10px;
  }

  &>.search {
    position: relative;

    input {
      background: $nav-bg;
      border-width: 0 0 1px 0;
      border-color: $search-box-border-color;
      padding: 6px 0 6px 20px;
      box-sizing: border-box;
      margin: $nav-v-padding $nav-padding;
      width: $nav-width - ($nav-padding*2);
      outline: none;
      color: $nav-text;
      border-radius: 0; /* ios has a default border radius */
    }

    &:before {
      position: absolute;
      top: 17px;
      left: $nav-padding;
      color: $nav-text;
      @extend %icon-search;
    }
  }

  .search-results {
    margin-top: 0;
    box-sizing: border-box;
    height: 0;
    overflow-y: auto;
    overflow-x: hidden;
    transition-property: height, margin;
    transition-duration: 180ms;
    transition-timing-function: ease-in-out;
    background: $nav-subitem-bg;
    &.visible {
      height: 30%;
      margin-bottom: 1em;
    }

    li {
      margin: 1em $nav-padding;
      line-height: 1;
    }

    a {
      color: $nav-text;
      text-decoration: none;

      &:hover {
        text-decoration: underline;
      }
    }
  }


  // The Table of Contents is composed of multiple nested
  // unordered lists.  These styles remove the default
  // styling of an unordered list because it is ugly.
  ul, li {
    list-style: none;
    margin: 0;
    padding: 0;
    line-height: 28px;
  }

  li {
    color: $nav-text;
    transition-property: background;
    transition-timing-function: linear;
    transition-duration: 200ms;
  }

  // This is the currently selected ToC entry
  .toc-link.active {
    background-color: $nav-active-bg;
    color: $nav-active-text;
  }

  // this is parent links of the currently selected ToC entry
  .toc-link.active-parent {
    background-color: $nav-active-parent-bg;
    color: $nav-active-parent-text;
  }

  .toc-list-h2 {
    display: none;
    background-color: $nav-subitem-bg;
    font-weight: 500;
  }

  .toc-h2 {
    padding-left: $nav-padding + $nav-indent;
    font-size: 12px;
  }

  .toc-footer {
    padding: 1em 0;
    margin-top: 1em;
    border-top: 1px dashed $nav-footer-border-color;

    li,a {
      color: $nav-text;
      text-decoration: none;
    }

    a:hover {
      text-decoration: underline;
    }

    li {
      font-size: 0.8em;
      line-height: 1.7;
      text-decoration: none;
    }
  }
}

.toc-link, .toc-footer li {
  padding: 0 $nav-padding 0 $nav-padding;
  display: block;
  overflow-x: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  text-decoration: none;
  color: $nav-text;
  transition-property: background;
  transition-timing-function: linear;
  transition-duration: 130ms;
}

// button to show navigation on mobile devices
#nav-button {
  span {
    display: block;
    $side-pad: $main-padding / 2 - 8px;
    padding: $side-pad $side-pad $side-pad;
    background-color: rgba($main-bg, 0.7);
    transform-origin: 0 0;
    transform: rotate(-90deg) translate(-100%, 0);
    border-radius: 0 0 0 5px;
  }
  padding: 0 1.5em 5em 0; // increase touch size area
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 100;
  color: #000;
  text-decoration: none;
  font-weight: bold;
  opacity: 0.7;
  line-height: 16px;
  img {
    height: 16px;
    vertical-align: bottom;
  }

  transition: left 0.3s ease-in-out;

  &:hover { opacity: 1; }
  &.open {left: $nav-width}
}


////////////////////////////////////////////////////////////////////////////////
// PAGE LAYOUT AND CODE SAMPLE BACKGROUND
////////////////////////////////////////////////////////////////////////////////

.page-wrapper {
  margin-left: $nav-width;
  position: relative;
  z-index: 10;
  background-color: $main-bg;
  min-height: 100%;

  padding-bottom: 1px; // prevent margin overflow

  // The dark box is what gives the code samples their dark background.
  // It sits essentially under the actual content block, which has a
  // transparent background.
  // I know, it's hackish, but it's the simplist way to make the left
  // half of the content always this background color.
  .dark-box {
    width: $examples-width;
    background-color: $examples-bg;
    position: absolute;
    right: 0;
    top: 0;
    bottom: 0;
  }

  .lang-selector {
    position: fixed;
    z-index: 50;
    border-bottom: 5px solid $lang-select-active-bg;
  }
}

.lang-selector {
  background-color: $lang-select-bg;
  width: 100%;
  font-weight: bold;
  a {
    display: block;
    float:left;
    color: $lang-select-text;
    text-decoration: none;
    padding: 0 10px;
    line-height: 30px;
    outline: 0;

    &:active, &:focus {
      background-color: $lang-select-pressed-bg;
      color: $lang-select-pressed-text;
    }

    &.active {
      background-color: $lang-select-active-bg;
      color: $lang-select-active-text;
    }
  }

  &:after {
    content: '';
    clear: both;
    display: block;
  }
}

////////////////////////////////////////////////////////////////////////////////
// CONTENT STYLES
////////////////////////////////////////////////////////////////////////////////
// This is all the stuff with the light background in the left half of the page

.content {
  // fixes webkit rendering bug for some: see #538
  -webkit-transform: translateZ(0);
  // to place content above the dark box
  position: relative;
  z-index: 30;

  &:after {
    content: '';
    display: block;
    clear: both;
  }

  &>h1, &>h2, &>h3, &>h4, &>h5, &>h6, &>p, &>table, &>ul, &>ol, &>aside, &>dl {
    margin-right: $examples-width;
    padding: 0 $main-padding;
    box-sizing: border-box;
    display: block;

    @extend %left-col;
  }

  &>ul, &>ol {
    padding-left: $main-padding + 15px;
  }

  // the div is the tocify hidden div for placeholding stuff
  &>h1, &>h2, &>div {
    clear:both;
  }

  h1 {
    @extend %header-font;
    font-size: 25px;
    padding-top: 0.5em;
    padding-bottom: 0.5em;
    margin-bottom: $h1-margin-bottom;
    margin-top: 2em;
    border-top: 1px solid #ccc;
    border-bottom: 1px solid #ccc;
    background-color: #fdfdfd;
  }

  h1:first-child, div:first-child + h1 {
    border-top-width: 0;
    margin-top: 0;
  }

  h2 {
    @extend %header-font;
    font-size: 19px;
    margin-top: 4em;
    margin-bottom: 0;
    border-top: 1px solid #ccc;
    padding-top: 1.2em;
    padding-bottom: 1.2em;
    background-image: linear-gradient(to bottom, rgba(#fff, 0.2), rgba(#fff, 0));
  }

  // h2s right after h1s should bump right up
  // against the h1s.
  h1 + h2, h1 + div + h2 {
    margin-top: $h1-margin-bottom * -1;
    border-top: none;
  }

  h3, h4, h5, h6 {
    @extend %header-font;
    font-size: 15px;
    margin-top: 2.5em;
    margin-bottom: 0.8em;
  }

  h4, h5, h6 {
    font-size: 10px;
  }

  hr {
    margin: 1em 50% 1em 10%;
    border-top: 1px solid #999;
    border-left: 0px;
}

  table {
    margin-bottom: 1em;
    overflow: auto;
    th,td {
      text-align: left;
      vertical-align: top;
      line-height: 1.6;
      code {
        white-space: nowrap;
      }
    }

    th {
      padding: 5px 10px;
      border-bottom: 1px solid #ccc;
      vertical-align: bottom;
    }

    td {
      padding: 10px;
    }

    tr:last-child {
      border-bottom: 1px solid #ccc;
    }

    tr:nth-child(odd)>td {
      background-color: lighten($main-bg,4.2%);
    }

    tr:nth-child(even)>td {
      background-color: lighten($main-bg,2.4%);
    }
  }

  dt {
    font-weight: bold;
  }

  dd {
    margin-left: 15px;
  }

  p, li, dt, dd {
    line-height: 1.6;
    margin-top: 0;
  }

  img {
    max-width: 100%;
  }

  code {
    background-color: rgba(0,0,0,0.05);
    padding: 3px;
    border-radius: 3px;
    @extend %break-words;
    @extend %code-font;
  }

  pre>code {
    background-color: transparent;
    padding: 0;
  }

  aside {
    padding-top: 1em;
    padding-bottom: 1em;
    margin-top: 1.5em;
    margin-bottom: 1.5em;
    background: $aside-notice-bg;
    line-height: 1.6;

    &.warning {
      background-color: $aside-warning-bg;
    }

    &.success {
      background-color: $aside-success-bg;
    }
  }

  aside:before {
    vertical-align: middle;
    padding-right: 0.5em;
    font-size: 14px;
  }

  aside.notice:before {
    @extend %icon-info-sign;
  }

  aside.warning:before {
    @extend %icon-exclamation-sign;
  }

  aside.success:before {
    @extend %icon-ok-sign;
  }

  .search-highlight {
    padding: 2px;
    margin: -3px;
    border-radius: 4px;
    border: 1px solid #F7E633;
    background: linear-gradient(to top left, #F7E633 0%, #F1D32F 100%);
  }
}

////////////////////////////////////////////////////////////////////////////////
// CODE SAMPLE STYLES
////////////////////////////////////////////////////////////////////////////////
// This is all the stuff that appears in the right half of the page

.content {
  pre, blockquote {
    background-color: $code-bg;
    color: #fff;

    margin: 0;
    width: $examples-width;

    float:right;
    clear:right;

    box-sizing: border-box;

    @extend %right-col;

    &>p { margin: 0; }

    a {
      color: #fff;
      text-decoration: none;
      border-bottom: dashed 1px #ccc;
    }
  }

  pre {
    @extend %code-font;
    padding-top: 2em;
    padding-bottom: 2em;
    padding: 2em $main-padding;
  }

  blockquote {
    &>p {
      background-color: $code-annotation-bg;
      padding: $code-annotation-padding 2em;
      color: #eee;
    }
  }
}

////////////////////////////////////////////////////////////////////////////////
// RESPONSIVE DESIGN
////////////////////////////////////////////////////////////////////////////////
// These are the styles for phones and tablets
// There are also a couple styles disperesed

@media (max-width: $tablet-width) {
  .toc-wrapper {
    left: -$nav-width;

    &.open {
      left: 0;
    }
  }

  .page-wrapper {
    margin-left: 0;
  }

  #nav-button {
    display: block;
  }

  .toc-link {
    padding-top: 0.3em;
    padding-bottom: 0.3em;
  }
}

@media (max-width: $phone-width) {
  .dark-box {
    display: none;
  }

  %left-col {
    margin-right: 0;
  }

  .toc-wrapper .lang-selector {
    display: block;
  }

  .page-wrapper .lang-selector {
    display: none;
  }

  %right-col {
    width: auto;
    float: none;
  }

  %right-col + %left-col {
    margin-top: $main-padding;
  }
}

.highlight .c, .highlight .cm, .highlight .c1, .highlight .cs {
  color: #909090;
}

.highlight.json {
  margin-right: 40%;
  width: 60%;
  clear: initial;
  float: initial;
  background-color: #223f5b;
}

////////////////////////////////////////////////////////////////////////////////
// SYNTAX HIGHLIGHTING OVERRIDE
////////////////////////////////////////////////////////////////////////////////
// These are to override the dynamically generated syntax highlight tokens' colors
// Would be better to find how to edit the original colors instead, but... meh :/

.highlight table td { padding: 5px !important; }
.highlight table pre { margin: 0 !important; }

:root {
  --highlight-cyan: #2DD;
  --highlight-lightblue: #2AD;
  --highlight-gold: #DA2;
  --highlight-gray: #999;
  --highlight-green: #5D5;
  --highlight-orange: #D70;
  --highlight-purple: #D7D;
  --highlight-red: #D55;
  --highlight-white: #DDD;
  --highlight-yellow: #DD7;
}

// Lexer tokens in comments for the following rules
.highlight { color: var(--highlight-white) !important; }          // Text (Any type of text data)
.highlight .w { color: var(--highlight-white) !important; }       // Text.Whitespace (Specially highlighted whitespace)
.highlight .err { color: var(--highlight-white) !important; }     // Error (Lexer errors)
.highlight .x { color: var(--highlight-white) !important; }       // Other (Token for data not matched by a parser (e.g. HTML markup in PHP code))
.highlight .k { color: var(--highlight-cyan) !important; }        // Keyword (Any keyword)
.highlight .kc { color: var(--highlight-purple) !important; }     // Keyword.Constant (Keywords that are constants)
.highlight .kd { color: var(--highlight-cyan) !important; }       // Keyword.Declaration (Keywords used for variable declaration (e.g. var in javascript))
.highlight .kn { color: var(--highlight-cyan) !important; }       // Keyword.Namespace (Keywords used for namespace declarations)
.highlight .kp { color: var(--highlight-cyan) !important; }       // Keyword.Pseudo (Keywords that aren't really keywords)
.highlight .kr { color: var(--highlight-cyan) !important; }       // Keyword.Reserved (Keywords which are reserved (such as end in Ruby))
.highlight .kt { color: var(--highlight-cyan) !important; }       // Keyword.Type (Keywords wich refer to a type id (such as int in C))
.highlight .kv { color: var(--highlight-white) !important; }      // ? (?)
.highlight .cd { color: var(--highlight-white) !important; }      // ? (?)
.highlight .n { color: var(--highlight-white) !important; }       // Name (Variable/function names)
.highlight .na { color: var(--highlight-gold) !important; }       // Name.Attribute (Attributes (in HTML for instance))
.highlight .nb { color: var(--highlight-gold) !important; }       // Name.Builtin (Builtin names which are available in the global namespace)
.highlight .bp { color: var(--highlight-gold) !important; }       // Name.Builtin.Pseudo (Builtin names that are implicit (such as self in Ruby))
.highlight .nc { color: var(--highlight-lightblue) !important; }  // Name.Class (For class declaration)
.highlight .no { color: var(--highlight-gold) !important; }       // Name.Constant (For constants)
.highlight .nd { color: var(--highlight-gold) !important; }       // Name.Decorator (For decorators in languages such as Python or Java)
.highlight .ni { color: var(--highlight-gold) !important; }       // Name.Entity (Token for entitites such as &nbsp; in HTML)
.highlight .ne { color: var(--highlight-red) !important; }        // Name.Exception (Exceptions and errors (e.g. ArgumentError in Ruby))
.highlight .nf { color: var(--highlight-yellow) !important; }     // Name.Function (Function names)
.highlight .py { color: var(--highlight-gold) !important; }       // Name.Property (Token for properties)
.highlight .nl { color: var(--highlight-gold) !important; }       // Name.Label (For label names)
.highlight .nn { color: var(--highlight-orange) !important; }     // Name.Namespace (Token for namespaces)
.highlight .nx { color: var(--highlight-white) !important; }      // Name.Other (For other names)
.highlight .nt { color: var(--highlight-white) !important; }      // Name.Tag (Tag mainly for markup such as XML or HTML)
.highlight .nv { color: var(--highlight-white) !important; }      // Name.Variable (Token for variables)
.highlight .vc { color: var(--highlight-white) !important; }      // Name.Variable.Class (Token for class variables (e.g. @@var in Ruby))
.highlight .vg { color: var(--highlight-gold) !important; }       // Name.Variable.Global (For global variables (such as $LOAD_PATH in Ruby))
.highlight .vi { color: var(--highlight-white) !important; }      // Name.Variable.Instance (Token for instance variables (such as @var in Ruby))
.highlight .l { color: var(--highlight-lightblue) !important; }   // Literal (Any literal (if not further defined))
.highlight .ld { color: var(--highlight-lightblue) !important; }  // Literal.Date (Date literals)
.highlight .s { color: var(--highlight-green) !important; }       // Literal.String (String literals)
.highlight .sb { color: var(--highlight-green) !important; }      // Literal.String.Backtick (Literal.String.Backtick)
.highlight .sc { color: var(--highlight-green) !important; }      // Literal.String.Char (Token type for single characters)
.highlight .sd { color: var(--highlight-green) !important; }      // Literal.String.Doc (Documentation strings (such as in Python))
.highlight .s2 { color: var(--highlight-green) !important; }      // Literal.String.Double (Double quoted strings)
.highlight .se { color: var(--highlight-gold) !important; }       // Literal.String.Escape (Escaped sequences in strings)
.highlight .sh { color: var(--highlight-green) !important; }      // Literal.String.Heredoc (For "heredoc" strings (e.g. in Ruby))
.highlight .si { color: var(--highlight-green) !important; }      // Literal.String.Interpol (For interpoled part in strings (e.g. in Ruby))
.highlight .sx { color: var(--highlight-green) !important; }      // Literal.String.Other (Token type for any other strings (for example %q{foo} string constructs in Ruby))
.highlight .sr { color: var(--highlight-lightblue) !important; }  // Literal.String.Regex (Regular expressions literals)
.highlight .s1 { color: var(--highlight-green) !important; }      // Literal.String.Single (Single quoted strings)
.highlight .ss { color: var(--highlight-gold) !important; }       // Literal.String.Symbol (Symbols (such as :foo in Ruby))
.highlight .m { color: var(--highlight-purple) !important; }      // Literal.Number (Any number literal (if not further defined))
.highlight .mf { color: var(--highlight-purple) !important; }     // Literal.Number.Float (Float numbers)
.highlight .mh { color: var(--highlight-purple) !important; }     // Literal.Number.Hex (Hexadecimal numbers)
.highlight .mi { color: var(--highlight-purple) !important; }     // Literal.Number.Integer (Integer literals)
.highlight .il { color: var(--highlight-purple) !important; }     // Literal.Number.Integer.Long (Long interger literals)
.highlight .mo { color: var(--highlight-purple) !important; }     // Literal.Number.Oct (Octal literals)
.highlight .mx { color: var(--highlight-purple) !important; }     // Literal.Number.Hex (Hexadecimal literals)
.highlight .mb { color: var(--highlight-purple) !important; }     // Literal.Number.Bin (Binary literals)
.highlight .o { color: var(--highlight-white) !important; }       // Operator (Operators (commonly +, -, /, *))
.highlight .ow { color: var(--highlight-white) !important; }      // Operator.Word (Word operators (e.g. and))
.highlight .p { color: var(--highlight-white) !important; }       // Punctuation (Punctuation which is not an operator)
.highlight .c { color: var(--highlight-gray) !important; }        // Comment (Single ligne comments)
.highlight .cm { color: var(--highlight-gray) !important; }       // Comment.Multiline (Mutiline comments)
.highlight .cp { color: var(--highlight-purple) !important; }     // Comment.Preproc (Preprocessor comments such as <% %> in ERb)
.highlight .c1 { color: var(--highlight-gray) !important; }       // Comment.Single (Comments that end at the end of the line)
.highlight .cs { color: var(--highlight-gray) !important; }       // Comment.Special (Special data in comments such as @license in Javadoc)
.highlight .g { color: var(--highlight-white) !important; }       // Generic (Unstyled token)
.highlight .gd { color: var(--highlight-white) !important; }      // Generic.Deleted (Token value as deleted)
.highlight .ge { color: var(--highlight-white) !important; }      // Generic.Emph (Token value as emphasized)
.highlight .gr { color: var(--highlight-white) !important; }      // Generic.Error (Token value as an error message)
.highlight .gh { color: var(--highlight-white) !important; }      // Generic.Heading (Token value as a headline)
.highlight .gi { color: var(--highlight-white) !important; }      // Generic.Inserted (Token value as inserted)
.highlight .go { color: var(--highlight-white) !important; }      // Generic.Output (Marked as a program output)
.highlight .gp { color: var(--highlight-white) !important; }      // Generic.Prompt (Marked as a command prompt)
.highlight .gs { color: var(--highlight-white) !important; }      // Generic.Strong (Mark the token value as bold (for rst lexer))
.highlight .gu { color: var(--highlight-white) !important; }      // Generic.Subheading (Marked as a subheadline)
.highlight .gt { color: var(--highlight-white) !important; }      // Generic.Traceback (Mark the token as a part of an error traceback)
.highlight .gl { color: var(--highlight-white) !important; }      // Generic.Lineno (Line numbers)
